---
# The web server software to use. Can be either 'apache' or 'nginx'.
drupalvm_webserver: apache

# The database system to use. Can be either 'mysql' or 'pgsql'.
drupal_db_backend: mysql

# Skip Jeff Geerling's Drupal installtion tasks
# We are installing Drupal by means of our own composer.json
# We'll do this ourselves in a post-provision task
composer_global_packages: []
drupal_build_composer: false
drupal_build_composer_project: false
drupal_install_site: false
drupal_build_makefile: false
drupal_deploy: false

# Essential Drupal settings.
drupal_composer_install_dir: "/var/www/drupal"
drupal_deploy_dir: "{{ drupal_composer_install_dir }}"
drupal_core_path: "{{ drupal_deploy_dir }}/web"

# our post-provision task will need repo URL
drupal_deploy_repo: "https://github.com/iainhouston/bradford-abbas.uk.git"

drupal_core_owner: "{{ drupalvm_user }}"

# secrets.yml is encrypted using ansible-vault
#
# composer_github_oauth_token is defined in `secrets.yml`
#
# These values are / can be overridden in secrets.yml
drupal_db_user: drupal
drupal_db_name: drupal
drupal_db_host: localhost
# End of secrets

drupal_domain: "{{ vagrant_hostname }}"
# regexp for allowed sites in `settings.php`
drupal_domain_regex: "{{ drupal_domain | regex_findall('([^.]+)')  | join('\\.') }}"

# Cron jobs are added to the vagrant user's crontab. Keys include name
# (required), minute, hour, day, weekday, month, job (required), and state.
drupalvm_cron_jobs: []

installed_extras:
  - drush

drush_launcher_install: false

# Drupal VM automatically creates a drush alias file in your ~/.drush folder if
# this variable is 'true'.
configure_drush_aliases: false


# Helper variable to configure the PHP-FPM connection for each Apache
# VirtualHost in the `apache_vhosts` list.
apache_vhost_php_fpm_parameters: |
    <FilesMatch \.php$>
      SetHandler "proxy:fcgi://{{ php_fpm_listen }}"
    </FilesMatch>

apache_packages_state: latest
apache_remove_default_vhost: true
apache_mods_enabled:
  - expires.load
  - headers.load
  - ssl.load
  - rewrite.load
  - proxy.load
  - proxy_fcgi.load

# MySQL databases and users.
mysql_root_password_update: true
mysql_databases:
  - name: "{{ drupal_db_name }}"
    encoding: utf8mb4
    collation: utf8mb4_general_ci

mysql_users:
  - name: "{{ drupal_db_user }}"
    host: "%"
    password: "{{ drupal_db_password }}"
    priv: "{{ drupal_db_name }}.*:ALL"

# extra_packages are apt-installed packages for Ubuntu Linux
extra_packages:
  - unzip
  - emacs-nox
  - mailutils
  - php-elisp
  - yaml-mode
  - opendkim
  - opendkim-tools
  - s3cmd

# You can configure almost anything else on the server in the rest of this file.
extra_security_enabled: false

# PHP Configuration.
# See version-specific notes: http://docs.drupalvm.com/en/latest/configurations/php/
php_version: "8.1"
php_install_recommends: no
php_memory_limit: "356M"
php_post_max_size: "256M"
php_upload_max_filesize: "256M"
php_display_errors: "On"
php_date_timezone: "Europe/London"
php_display_startup_errors: "On"
php_realpath_cache_size: "1024K"
php_opcache_enabled_in_ini: true
php_opcache_memory_consumption: "192"
php_opcache_max_accelerated_files: 4096
php_max_input_vars: "4000"

# Drupal VM defaults to using PHP-FPM with either Apache or Nginx.
php_enable_php_fpm: true
php_fpm_listen: "127.0.0.1:9000"

# Run specified scripts before or after VM is provisioned. Use {{ playbook_dir }}
# to reference the provisioning/ folder in Drupal VM or {{ config_dir }} to
# reference the directory where your `config.yml` is.
pre_provision_scripts: []
post_provision_scripts: []
  # - "{{ playbook_dir }}/../examples/scripts/configure-solr.sh"

# MySQL Configuration.
mysql_slow_query_log_enabled: true
mysql_slow_query_time: 2
mysql_wait_timeout: 300

# Other configuration.
known_hosts_path: ~/.ssh/known_hosts
hostname_configure: true
hostname_fqdn: "{{ vagrant_hostname }}"
ssh_home: "{{ drupal_core_path }}"

pre_provision_tasks_dir: "{{ config_dir }}/pre_provision_tasks/*"
post_provision_tasks_dir: "{{ config_dir }}/post_provision_tasks/*"

# Force use of ansible_local provisioner, even if Ansible is installed on host.
force_ansible_local: false

